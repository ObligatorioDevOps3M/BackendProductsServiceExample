# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI/CD Workflow

on:
  ##Revisar que dispara build y deploy en push aveces
  push:
    branches: [ "main" , "staging" , "develop" , "feature/*"]
  pull_request:
    branches: [ "main" , "staging" , "develop" , "feature/*"]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK Corretto 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'corretto'
        cache: maven

  # Build con Maven
    - name: Build and Test with Maven
      run: mvn -B package --file pom.xml

  # Repo DevOps    
    - name: Checkout external repository
      uses: actions/checkout@v3
      with:
        repository: ObligatorioDevOps3M/DevOps
        token: ${{ secrets.GITHUB_TOKEN }} # token del workflow
        path: devops-repo-directory # directorio auxiliar para recibir el repo externo

  # Credenciales de AWS
    #Parametrizar:
        ## -AWS Region en secrets de GitHub?
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: us-east-1 # Cambia a tu regiÃ³n
  
  #Build y push de la imagen de Docker a AWS ECR
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         IMAGE_TAG: latest
      run: |
        BRANCH_NAME=${GITHUB_REF##*/}
          if [[ "$BRANCH_NAME" == "main" ]]; then
            CUSTOM_ENV_VAR="main"
            echo "ENVIROMENT_NAME=production" >> $GITHUB_ENV
          elif [[ "$BRANCH_NAME" == staging ]]; then
            CUSTOM_ENV_VAR="staging"
            echo "ENVIROMENT_NAME=staging" >> $GITHUB_ENV
          else
            CUSTOM_ENV_VAR="develop"
            echo "ENVIROMENT_NAME=develop" >> $GITHUB_ENV
          fi
        VALUE=$(cat devops-repo-directory/terraform/options-${CUSTOM_ENV_VAR}/ecr_repository_uri.txt)
        REPOSITORY_URI=$VALUE 

        docker build . --file Dockerfile --tag $VALUE:$IMAGE_TAG
        docker push $VALUE:$IMAGE_TAG

        sed "s|REPOSITORY_URI|$REPOSITORY_URI|g; s|TAG_PLACEHOLDER|$IMAGE_TAG|g" k8s/deployment.yaml
   
  # Deploy de la aplicacion en AWS EKS
  ## Parametrizar:
      ## --archivos deployment.yaml y service.yaml en DevOps?
    - name: Deploy Application to EKS
      run: |
        aws eks --region us-east-1 update-kubeconfig --name cluster_obligatorio_${{env.ENVIROMENT_NAME}}
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml


